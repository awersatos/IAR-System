/*******************************************************************************
********************************************************************************
**                                                                            **
**          БИБЛИОТЕКА ФУНКЦИЙ МОДУЛЯ GSM WISMO 228                           **
**                                                                            **
********************************************************************************
*******************************************************************************/

//******************Подключаемые файлы******************************************
#include "GSM.h"
#include "main.h"
#include <string.h>
//*************Инициализация глобальных переменных******************************

//*****************Функции для работы с GSM  ***********************************
void GSM_Configuration(void) //Инициализация GSM
{
 uint8_t nr_sim=1;
 uint8_t x; //Счетчик
 do {
  Reset_rxDMA_ClearBufer(GSM); //Сброс буфера 
 SIM(nr_sim); //Выбор сим карты
 
if(GPIO_ReadInputDataBit(GSM_MOD,GSM_READY)==0)
{
 GPIO_ResetBits(GSM_MOD , GSM_ON); //Включаем модем
 delay_ms(1000);
 GPIO_SetBits(GSM_MOD , GSM_ON);
}
 else
 {
  GPIO_ResetBits(GSM_MOD , GSM_RESET); //Перезагружаем  модем
 delay_ms(100);
 GPIO_SetBits(GSM_MOD , GSM_RESET); 
   
 }
  while(GPIO_ReadInputDataBit(GSM_MOD,GSM_READY)==0); //Ожидание готовности модема
  delay_ms(2000);
  //SendString_InUnit("AT\r\n" , GSM); 
 // delay_ms(100);
  SendString_InUnit("AT+CPIN?\r\n" , GSM);
  delay_ms(500);
  if (strstr(GSM_RxBuffer , "READY") !=NULL) //Если СИМ карта опознана
   {
     Reset_rxDMA_ClearBufer(GSM); //Сброс буфера
     for(x=0;x<5;x++) //Проверка регистрации в сети
     {
      if(REG_NET()=='R') //Если регистрация успешна
      {
        STATUS.GSM_Status=ACTIVE;
        STATUS.SIM_Card=nr_sim;
        SendString_InUnit("AT+COPS?\r\n" , GSM); //Определение оператора сотовой связи
        delay_ms(100);
        if (strstr(GSM_RxBuffer , "Beeline") !=NULL) STATUS.OPERATOR=Beeline_OP;
        if (strstr(GSM_RxBuffer , "MTS") !=NULL) STATUS.OPERATOR=MTS_OP;
        if (strstr(GSM_RxBuffer , "MegaFon") !=NULL) STATUS.OPERATOR=Megafon_OP;
        Reset_rxDMA_ClearBufer(GSM); //Сброс буфера
        break;
      }
       else 
       {
        STATUS.GSM_Status=INACTIVE;
        delay_ms(2000);
       }
     }
    
   }
  
   nr_sim++;
   if(nr_sim>3) nr_sim=1; 
 }while(STATUS.GSM_Status==INACTIVE);  
 // SendString_InUnit("AT+GSN\r\n" , GSM); 
   //delay_ms(2000);
}



void SIM(uint8_t sim) //Функция переключения СИМ карт
{
  switch(sim)
  {
  case 1: 
    {
      GPIO_ResetBits(GSM_MOD , SIM2);
      GPIO_ResetBits(GSM_MOD , SIM3); 
      GPIO_SetBits(GSM_MOD , SIM1);
      break;
    }
    
  case 2:
    {
      GPIO_ResetBits(GSM_MOD , SIM1);
      GPIO_ResetBits(GSM_MOD , SIM3);
      GPIO_SetBits(GSM_MOD , SIM2);
      break;
    }
    
    case 3:
    {
      GPIO_ResetBits(GSM_MOD , SIM1);
      GPIO_ResetBits(GSM_MOD , SIM2);
      GPIO_SetBits(GSM_MOD , SIM3);
      break;
    }
  }
  
}

char REG_NET(void)  //Проверка регистации в сети
{ char *d;
  
  SendString_InUnit("AT+CREG?\r\n" , GSM);
  delay_ms(100);
  d=strstr(GSM_RxBuffer , "+CREG:");
   if(d!=NULL)
   {
     d=d+9;
     if((*d=='1')|(*d=='5')) 
     { Reset_rxDMA_ClearBufer(GSM); //Сброс буфера
       return 'R';}    
   }
   Reset_rxDMA_ClearBufer(GSM); //Сброс буфера
   return NULL; 
}
  
void SendData_onServer(uint8_t state)  //Функция отправки данных на сервер
{
  // Если выбрана не 1 сим карта или нет регистрации в сети то перезапуск модема и поиск доступной сети
  if((STATUS.SIM_Card!=1) | (REG_NET()!='R')) GSM_Configuration();
  
  Reset_rxDMA_ClearBufer(GSM); //Сброс буфера
  SendString_InUnit("AT+WIPCFG=1\r\n" , GSM); //Запуск TCP/IP стека
  delay_ms(100);
  if(strstr(GSM_RxBuffer , "OK") !=NULL) 
  {
   SendString_InUnit("AT+WIPBR=1,6\r\n" , GSM);  //Открытие GPRS барьера
   delay_ms(100);
   
   switch(STATUS.OPERATOR)
   {
     
     
   }
   
   
  }
  
  
}





  